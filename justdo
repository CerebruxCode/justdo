#!/bin/bash
# shellcheck source=/dev/null
#  Usage justdo [options] "task name" duration(mins) interval(seconds)

do_help() {
    printf "Usage:\n\t%s\n" "justdo [--[no-]ticks] [--[no-]color] [<task name>] [<dutation>min] [<tics> sec]"
}

# Play a soynd file
do_sound() {
  ${PLAYER} "$1" > /dev/null 2>&1 &
}

# Notify and optionaly play a sound
do_notify() {
  ${NOTIFIER} "${APP_NAME}" "$1"
  if (( $# > 1 )); then
    do_sound "$2"
  fi
}

# Calculate bars
# Usage: var=$(do_bars percentage)
# Environment: GREEN, RESETC, BAR_WIDTH
# TODO: if terminal supports use fractions UTF8 chars
do_bars() {
    percentage=$1
    bar1_w=$(( percentage * BAR_WIDTH / 100 ));
    bar2_w=$(( BAR_WIDTH - bar1_w ));
    bar1_s=$(printf "%${bar1_w}s" | tr " " "#")
    bar2_s=$(printf "%${bar2_w}s" | tr " " ".")
    progress="${GREEN}${bar1_s}${RESETC}${bar2_s}"
    echo "${progress}"
}

# Format time left
# Usage var=$(do_time_fmt time total)
do_time_fmt() {
    time=$1
    total=$2
    minS="$(( (total - time) / 60 ))"
    secS="$(( (total - time) % 60 ))"
    echo "${minS}:${secS}"
}

# Parse comand line options
OPTIONS=$(getopt -n "$0" -o htc --long "help,ticks,no-ticks,color,no-color" -- "$@" )
if [ $? -ne 0 ]; then
    do_help
    exit 1
fi

# Get Default values
# TODO: XDG_DATADIRS
ASSETS="${HOME}/.justdo"
source "${ASSETS}/justdo.conf"
ticks="${TICKS:-yes}"
color="${COLOR:-yes}"
eval set -- "$OPTIONS"

while true; do
    case "$1" in
        -h|--help)
            do_help
            shift
        ;;
        --no-ticks)
            ticks="no"
            shift
        ;;
        -t|--ticks)
            ticks="yes"
            shift
        ;;
        --no-color)
            color="no"
            shift
        ;;
        -c|--color)
            color="yes"
            shift
        ;;
        --)
            shift
            break
        ;;
    esac
done

task=${1:-${TASK_DEF_NAME}}
mins=${2:-${DEF_TASK_DUR}}
interval=${3:-${DEF_TASK_TICK}}

# Respect NO_COLOR
[[ -v NO_COLOR ]] && color="no"
GREEN="$(tput setaf 7)$(tput setab 2)"
RESETC="$(tput sgr0)"
[[ "$color" == "no" ]] && GREEN=""

# Pomodoro time start: notify user
do_notify "Start: ${task}"

# Loop calculations
secs=$(( mins * 60 ))
loops=$((secs / interval))

# Progress bar loop
SECONDS=0
for ((i=0; i<loops; i++)); do
    duration=$SECONDS;
    percentage="$(( 100 - 100*(secs - duration) / secs ))";
    percentage_str="${percentage}%"
    bar=$(do_bars $percentage)
    rem=$(do_time_fmt total_sec duration)
    printf "\r%s Time left %s (%s) " "$task: $bar" "$rem" "$percentage_str"

    # Did time pass?
    if (( duration > secs )); then
        break;
    fi
    sleep "$interval";

    [ "${ticks}" == "yes" ] && do_sound "${SOUND_CLICK_FILE}"
done
printf "\r\033[K%s: Done! \n" "${task}"

#  Time end: play sound and notify
do_notify "End: ${task}" "${SOUND_FILE}"
