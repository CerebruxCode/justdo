#!/bin/bash
# shellcheck source=/dev/null
#  Usage justdo [options] "task name" duration(mins) interval(seconds)

base_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

do_help() {
    printf "Usage:\n\t%s\n" "justdo [--[no-]ticks] [--[no-]color] [<task name>] [<dutation>min] [<tics> sec]"
}

# Play a sound file
do_sound() {
  if [[ -f "$1" ]]; then
    ${PLAYER} "$1" > /dev/null 2>&1 &
  else
    echo "Error: File $1 not found!"
    exit
  fi
}

# Notify and optionaly play a sound
do_notify() {
  local play_sound=${3:-yes}
  ${NOTIFIER} "${APP_NAME}" "$1"
  if (( $# > 1 )); then
    [ "${play_sound}" == "yes" ] && do_sound "$2"
  fi
}

# Read configuration from common places
# Respects $XDG_CONFIG_HOME, $XDG_CONFIG_DIRS
do_read_config() {
  # Default settings
  SOUND_TICKS="yes"
  SOUND_DONE="yes"
  APP_NAME="Justdo"
  BAR_WIDTH=40
  TASK_DEF_NAME="Pomodoro"
  DEF_TASK_TICK=30
  DEF_TASK_DUR=25
  PLAYER='paplay'
  NOTIFIER='notify-send'

  # Locate sound files
  SOUND_FILE=$(do_find_asset "sounds/complete.ogg")
  SOUND_CLICK_FILE=$(do_find_asset "sounds/reminder.ogg")

  # CASCADE load of config files
  # First read {XDG_CONFIG_DIRS}/justdo then XDG_CONFIG_HOME/justdo
  # Fallbacks to assets for development
  local app_dir_conf="justdo/justdo.conf"
  local xdg_config_home=${XDG_CONFIG_HOME:-"${HOME}/.config"}
  local xdg_config_dirs=${XDG_CONFIG_DIRS:-/etc/xdg}
  local paths="${xdg_config_dirs}:${xdg_config_home}:${base_dir}/assets"
  IFS=':' read -r -a path_array <<< "$paths"
  local path
  for path in  "${path_array[@]}"; do
    local config_file="${path}/${app_dir_conf}"
    if [[ -f "${config_file}" ]]; then
      source "${config_file}"
    fi
  done
}

# Find an asset in common places
# Respects $XDG_DATA_HOME, $XDG_DATA_DIRS
do_find_asset() {
  local asset_file="justdo/$1"
  local xdg_data_home=${XDG_DATA_HOME:-"${HOME}/.local/share"}
  local xdg_data_dirs=${XDG_CONFIG_DIRS:-/usr/local/share}
  local paths="${xdg_data_home}:${xdg_data_dirs}:${base_dir}/assets"
  IFS=':' read -r -a file_array <<< "$paths"
  local path
  for path in  "${file_array[@]}"; do
    local file="${path}/${asset_file}"
    if [[ -f "${file}" ]]; then
      echo "${file}"
      return 0
    fi
  done
}

# Calculate bars
# Usage: var=$(do_bars percentage, barwidth, color_str)
# TODO: if terminal supports use fractions UTF8 chars
do_bars() {
    local percentage=$1
    local bar_width=$2
    local color_str=$3
    local RESETC
    RESETC="$(tput sgr0)"

    local bar1_w=$(( percentage * bar_width / 100 ));
    local bar2_w=$(( bar_width - bar1_w ));
    local bar1_s
    local bar2_s
    bar1_s=$(printf "%${bar1_w}s" | tr " " "#")
    bar2_s=$(printf "%${bar2_w}s" | tr " " ".")
    local progress="${color_str}${bar1_s}${RESETC}${bar2_s}"
    echo "${progress}"
}

# Format time left
# Usage var=$(do_time_fmt time total)
do_time_fmt() {
    local time=$1
    local total=$2
    local minS="$(( (total - time) / 60 ))"
    local secS="$(( (total - time) % 60 ))"
    echo "${minS}:${secS}"
}

#
# BEGIN SCRIPT
#
do_read_config

# Parse comand line options
OPTIONS=$(getopt -n "$0" -o htc --long "help,ticks,no-ticks,color,no-color" -- "$@" )
if [ $? -ne 0 ]; then
    do_help
    exit 1
fi
eval set -- "$OPTIONS"
ticks="${SOUND_TICKS}"
while true; do
    case "$1" in
        -h|--help)
            do_help
            shift
        ;;
        --no-ticks)
            ticks="no"
            shift
        ;;
        -t|--ticks)
            ticks="yes"
            shift
        ;;
        --no-color)
            color="no"
            shift
        ;;
        -c|--color)
            color="yes"
            shift
        ;;
        --)
            shift
            break
        ;;
    esac
done

task=${1:-${TASK_DEF_NAME}}
mins=${2:-${DEF_TASK_DUR}}
interval=${3:-${DEF_TASK_TICK}}

GREEN="$(tput setaf 2)$(tput setab 2)"
RED="$(tput setaf 1)$(tput setab 1)"
# Respect NO_COLOR
if [[ -v NO_COLOR ]]; then
  GREEN=""
  RED=""
fi

# Pomodoro time start: notify user
do_notify "Start: ${task}"

# Loop calculations
secs=$(( mins * 60 ))
loops=$((secs / interval))

# Progress bar loop
SECONDS=0
color=$GREEN
for ((i=0; i<loops; i++)); do
    duration=$SECONDS;
    if (( duration > secs )); then
        break;
    fi

    (( i > loops* 3/4 )) && color=$RED;
    percentage="$(( 100 - 100*(secs - duration) / secs ))";
    percentage_str="${percentage}%"
    bar=$(do_bars $percentage "$BAR_WIDTH" "$color")
    rem=$(do_time_fmt $duration $secs)
    echo -ne "\r${task}: ${bar} Time left ${rem} (${percentage_str}) "

    sleep "$interval"
    if [ "${ticks}" == "yes" ]; then
      do_sound "${SOUND_CLICK_FILE}"
    fi
done
RESET_LINE="\r\033[K"
echo -ne "${RESET_LINE}${task}: Done!\n"

#  Time end: play sound and notify
do_notify "End: ${task}" "${SOUND_FILE}" "${SOUND_DONE}"

echo "Your pomodo is Done!"
echo "   * Do make a 5 min break!"
echo "   * Do not thing about your problem!"
echo "   * Make a 30 mins break after 4 pomodoro sessions"
